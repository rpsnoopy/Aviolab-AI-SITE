/**
 * Translation Generator for Aviolab AI Website
 * 
 * This script reads structured content from english_texts.txt and italian_texts.txt
 * and generates the translations.js file for the website.
 * 
 * Prerequisites:
 * - Node.js must be installed (https://nodejs.org/)
 * - No additional dependencies required
 * 
 * Usage: 
 * 1. Make changes to the text files in assets/english_texts.txt and assets/italian_texts.txt
 * 2. Run this script with Node.js: node update-translations.js
 * 3. The translations.js file will be updated with the new content
 * 4. Refresh your browser to see the changes
 * 
 * Notes:
 * - Both text files must contain the same keys
 * - HTML markup in values is supported and preserved
 * - Lines starting with # are treated as comments and ignored
 */

const fs = require('fs');
const path = require('path');

// File paths
const englishFilePath = path.join(__dirname, 'assets', 'english_texts.txt');
const italianFilePath = path.join(__dirname, 'assets', 'italian_texts.txt');
const outputFilePath = path.join(__dirname, 'js', 'translations.js');

/**
 * Parse a text file with key-value pairs into a JavaScript object
 * Format: key: value
 * Ignores lines starting with # and empty lines
 * Preserves HTML tags in values
 */
function parseTextFile(filePath) {
    try {
        const fileContent = fs.readFileSync(filePath, 'utf8');
        const lines = fileContent.split('\n');
        const translations = {};
        
        for (const line of lines) {
            // Skip comments and empty lines
            if (line.trim().startsWith('#') || line.trim() === '' || line.trim().startsWith('##')) {
                continue;
            }
            
            // Parse key-value pairs
            const colonIndex = line.indexOf(':');
            if (colonIndex !== -1) {
                const key = line.substring(0, colonIndex).trim();
                const value = line.substring(colonIndex + 1).trim();
                
                if (key && value) {
                    translations[key] = value;
                }
            }
        }
        
        return translations;
    } catch (error) {
        console.error(`Error reading or parsing ${filePath}:`, error);
        return {};
    }
}

/**
 * Generate the translations.js file with English and Italian translations
 */
function generateTranslationsFile() {
    const englishTranslations = parseTextFile(englishFilePath);
    const italianTranslations = parseTextFile(italianFilePath);
    
    // Create the translations object
    const translations = {
        en: englishTranslations,
        it: italianTranslations
    };
    
    // Convert to JavaScript code with warning comment
    const jsContent = `/**
 * IMPORTANT: DO NOT EDIT THIS FILE DIRECTLY
 * This file is auto-generated from english_texts.txt and italian_texts.txt
 * To update content, edit those files and run 'node update-translations.js'
 * Last generated: ${new Date().toISOString()}
 */
const translations = ${JSON.stringify(translations, null, 4)};`;
    
    // Write to file
    try {
        fs.writeFileSync(outputFilePath, jsContent);
        console.log(`âœ“ Successfully updated translations.js with ${Object.keys(englishTranslations).length} English entries and ${Object.keys(italianTranslations).length} Italian entries.`);
    } catch (error) {
        console.error('Error writing translations.js:', error);
    }
}

// Run the generator
generateTranslationsFile();
